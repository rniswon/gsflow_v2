# makedefaults created on 2020-10-27 11:17:18.255120
# by pymake (version 1.2.0) for the 'gsflow' executable 
# using the 'gfortran' fortran and 'gcc' c/c++ compiler(s).

# determine OS
ifeq ($(OS), Windows_NT)
	detected_OS = Windows
	OS_macro = -D_WIN32
else
	detected_OS = $(shell sh -c 'uname 2>/dev/null || echo Unknown')
	ifeq ($(detected_OS), Darwin)
		OS_macro = -D__APPLE__
	else
		OS_macro = -D__LINUX__
	endif
endif

# Define the directories for the object and module files
# and the executable and its path.
BINDIR = .
OBJDIR = ./obj_temp
MODDIR = ./mod_temp
INCSWITCH = -I $(OBJDIR)
MODSWITCH = -J $(MODDIR)

# define program name
PROGRAM = $(BINDIR)/gsflow

# define os dependent program name
ifeq ($(detected_OS), Windows)
	PROGRAM = $(BINDIR)/gsflow.exe
endif

# use GNU compilers if defined compilers do not exist
ifeq ($(detected_OS), Windows)
	WHICH = where
else
	WHICH = which
endif
ifeq (, $(shell $(WHICH) $(FC)))
	FC = gfortran
endif
ifeq (, $(shell $(WHICH) $(CC)))
	CC = gcc
endif

# set fortran compiler to gfortran if it is f77
ifeq ($(FC), f77)
	FC = gfortran
	# set c compiler to gcc if not passed on the command line
	ifneq ($(origin CC), "command line")
		ifneq ($(CC), gcc)
			CC = gcc
		endif
	endif
endif

# set the optimization level (OPTLEVEL) if not defined
OPTLEVEL ?= -O1

# set the fortran flags
ifeq ($(detected_OS), Windows)
	ifeq ($(FC), gfortran)
		FFLAGS ?= -static -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid $(OS_macro) -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
else
	ifeq ($(FC), gfortran)
		FFLAGS ?= -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid $(OS_macro) -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
	ifeq ($(FC), $(filter $(FC), ifort mpiifort))
		FFLAGS ?= -no-heap-arrays -fpe0 -traceback -Bstatic -fno-second-underscore -ffree-line-length-512
		MODSWITCH = -module $(MODDIR)
	endif
endif

# set the c/c++ flags
ifeq ($(detected_OS), Windows)
	ifeq ($(CC), $(filter $(CC), gcc g++))
		CFLAGS ?= -static -D_UF -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
	ifeq ($(CC), $(filter $(CC), clang clang++))
		CFLAGS ?= -D_UF -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
else
	ifeq ($(CC), $(filter $(CC), gcc g++))
		CFLAGS ?= -D_UF -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
	ifeq ($(CC), $(filter $(CC), clang clang++))
		CFLAGS ?= -D_UF -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
	ifeq ($(CC), $(filter $(CC), icc mpiicc icpc))
		CFLAGS ?= -D_UF -Bstatic -fno-second-underscore -ffree-line-length-512
	endif
endif

# set the ldflgs
ifeq ($(detected_OS), Windows)
	ifeq ($(FC), $(filter $(FC), gfortran))
		LDFLAGS ?= -static -static-libgfortran -static-libgcc -static-libstdc++ -lm -lgfortran -lgcc
	endif
else
	ifeq ($(FC), gfortran)
		LDFLAGS ?= -lgfortran -lgcc -lm -lc
	endif
	ifeq ($(FC), $(filter $(FC), ifort mpiifort))
		LDFLAGS ?= -lgfortran -lgcc -lm -lc -nofor_main
	endif
endif

# Define task functions
# Create the bin directory and compile and link the program
all: makedirs | $(PROGRAM)

# Make the bin directory for the executable
makedirs:
	mkdir -p $(BINDIR)
	mkdir -p $(MODDIR)

# Write selected compiler settings
.PHONY: settings
settings:
	@echo "Optimization level: $(OPTLEVEL)"
	@echo "Fortran compiler:   $(FC)"
	@echo "Fortran flags:      $(FFLAGS)"
	@echo "C compiler:         $(CC)"
	@echo "C flags:            $(CFLAGS)"
	@echo "Linker:             $(FC)"
	@echo "SYSLIBS:            $(LDFLAGS)"

# Clean the object and module files and the executable
.PHONY: clean
clean:
	-rm -rf $(OBJDIR)
	-rm -rf $(MODDIR)
	-rm -rf $(PROGRAM)

# Clean the object and module files
.PHONY: cleanobj
cleanobj:
	-rm -rf $(OBJDIR)
	-rm -rf $(MODDIR)

